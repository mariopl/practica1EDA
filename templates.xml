<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java-members" deleted="false" description="Método clone (las variables son las propiedades que definen la igualdad). Sustituya tipo1" enabled="true" name="clone">@Override&#13;
public ${tipo1:var} clone(){&#13;
	   ${tipo1:var} copia=null;&#13;
		try{&#13;
			copia=(${tipo1:var})super.clone();&#13;
		}catch(CloneNotSupportedException e){e.printStackTrace();}&#13;
		return copia;	&#13;
}&#13;
</template><template autoinsert="true" context="java-members" deleted="false" description="Método compareTo (las variables son las propiedades que definen la igualdad). Sustituya tipo1,  id1 e id2." enabled="true" name="compareTo">@Override&#13;
public int compareTo(${tipo1:var} other) {&#13;
	int result;&#13;
	if (this == null || other == null) {&#13;
		if (this == null &amp;&amp; other == null)&#13;
			result = 0;&#13;
		else if (this == null)&#13;
			result = +1;&#13;
		else&#13;
			result = -1;&#13;
	} else {&#13;
		result = get${id1:var}().compareTo(other.get${id1:var}());&#13;
		if(result == 0)&#13;
			result = get${id2:var}().compareTo(other.get${id2:var}());&#13;
	}&#13;
	return result;&#13;
}&#13;
&#13;
</template><template autoinsert="true" context="java-members" deleted="false" description="Expresion/Accion en la API de Google" enabled="true" name="expresion">private static Function&lt;${tipoE:var}, ${tipoS:var}&gt; expresion = new ${tipoE:var}A${tipoS:var}();&#13;
&#13;
	public static Function&lt;${tipoE:var}, ${tipoS:var}&gt; getExpresion() {&#13;
		return expresion;&#13;
	}&#13;
&#13;
	private static class ${tipoE:var}A${tipoS:var} implements&#13;
			Function&lt;${tipoE:var}, ${tipoS:var}&gt; {&#13;
&#13;
		public ${tipoE:var}A${tipoS:var}() {&#13;
&#13;
		}&#13;
&#13;
		@Override&#13;
		public ${tipoS:var} apply(${tipoE:var} s) {&#13;
&#13;
			return new ${tipoS:var}Impl(s);&#13;
		}&#13;
	}</template><template autoinsert="true" context="java-members" deleted="false" description="Definición de orden para un tipo" enabled="true" name="ordenes">private static Comparator&lt;${tipo1:var}&gt; orden${tipo1:var} = &#13;
       new Orden${tipo1:var}();&#13;
&#13;
public static Comparator&lt;${tipo1:var}&gt; getOrden(){&#13;
	return orden${tipo1:var};&#13;
}&#13;
&#13;
private static class Orden${tipo1:var} implements Comparator&lt;${tipo1:var}&gt;{&#13;
		&#13;
	public Orden${tipo1:var}(){&#13;
			&#13;
	}&#13;
		&#13;
	public int compare(${tipo1:var} o1, ${tipo1:var} o2){&#13;
		${tipo2:var} d2 = o2.get${id1:var}();&#13;
		${tipo2:var} d1 = o1.get${id1:var}();&#13;
		int r = d2.compareTo(d1);&#13;
		if(r==0)&#13;
			r = o1.compareTo(o2);&#13;
		return r;&#13;
	}&#13;
}&#13;
&#13;
&#13;
</template><template autoinsert="true" context="java-members" deleted="false" description="Método toString  (las variables deben ser como mínimo  las propiedades que definen la igualdad). Sustituya id1, id2, id3" enabled="true" name="toString">@Override&#13;
public String toString() {&#13;
	String s;&#13;
	s = ${id1:var} + "," + ${id2:var} + "," + ${id3:var};&#13;
	return s;&#13;
}&#13;
</template></templates>